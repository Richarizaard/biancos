import { gql } from '@apollo/client'
import * as Apollo from '@apollo/client'
export type Maybe<T> = T | null
export type InputMaybe<T> = Maybe<T>
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K]
}
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>
}
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>
}
const defaultOptions = {} as const
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string
  String: string
  Boolean: boolean
  Int: number
  Float: number
}

/** Autogenerated input type of CreateRecipe */
export type CreateRecipeInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** Description of the created recipe */
  description: Scalars['String']
  /** Name of the created recipe */
  name: Scalars['String']
  /** IDs of the recipes ingredients */
  toppingIds: Array<Scalars['ID']>
}

/** Autogenerated return type of CreateRecipe. */
export type CreateRecipePayload = {
  __typename: 'CreateRecipePayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** Created recipe */
  recipe?: Maybe<Recipe>
}

/** Autogenerated input type of DeleteTopping */
export type DeleteToppingInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  /** ID of the topping to be deleted */
  id: Scalars['ID']
}

/** Autogenerated return type of DeleteTopping. */
export type DeleteToppingPayload = {
  __typename: 'DeleteToppingPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  /** ID of the deleted topping */
  id?: Maybe<Scalars['ID']>
}

export type Mutation = {
  __typename: 'Mutation'
  /** Creates a recipe */
  createRecipe?: Maybe<CreateRecipePayload>
  /** Deletes topping entry based off id */
  deleteTopping?: Maybe<DeleteToppingPayload>
  /** Updates topping info */
  updateTopping?: Maybe<UpdateToppingPayload>
}

export type MutationCreateRecipeArgs = {
  input: CreateRecipeInput
}

export type MutationDeleteToppingArgs = {
  input: DeleteToppingInput
}

export type MutationUpdateToppingArgs = {
  input: UpdateToppingInput
}

export type Query = {
  __typename: 'Query'
  /** Returns all recipes */
  recipes: Array<Recipe>
  /** Returns all toppings */
  toppings: Array<Topping>
  /** Returns all users */
  users: Array<User>
}

export type Recipe = {
  __typename: 'Recipe'
  description: Scalars['String']
  id: Scalars['ID']
  name: Scalars['String']
  toppings: Array<Topping>
}

export type Topping = {
  __typename: 'Topping'
  description: Scalars['String']
  id: Scalars['ID']
  name: Scalars['String']
}

/** Autogenerated input type of UpdateTopping */
export type UpdateToppingInput = {
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: InputMaybe<Scalars['String']>
  description: Scalars['String']
  id: Scalars['ID']
  name: Scalars['String']
}

/** Autogenerated return type of UpdateTopping. */
export type UpdateToppingPayload = {
  __typename: 'UpdateToppingPayload'
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>
  topping?: Maybe<Topping>
}

export type User = {
  __typename: 'User'
  email?: Maybe<Scalars['String']>
  firstName?: Maybe<Scalars['String']>
  id: Scalars['ID']
  lastName?: Maybe<Scalars['String']>
  role?: Maybe<Scalars['String']>
}

export type CreateRecipeMutationVariables = Exact<{
  input: CreateRecipeInput
}>

export type CreateRecipeMutation = {
  __typename: 'Mutation'
  createRecipe?: {
    __typename: 'CreateRecipePayload'
    recipe?: {
      __typename: 'Recipe'
      name: string
      description: string
      toppings: Array<{
        __typename: 'Topping'
        id: string
        name: string
        description: string
      }>
    } | null
  } | null
}

export type DeleteToppingMutationVariables = Exact<{
  input: DeleteToppingInput
}>

export type DeleteToppingMutation = {
  __typename: 'Mutation'
  deleteTopping?: {
    __typename: 'DeleteToppingPayload'
    id?: string | null
  } | null
}

export type UpdateToppingMutationVariables = Exact<{
  input: UpdateToppingInput
}>

export type UpdateToppingMutation = {
  __typename: 'Mutation'
  updateTopping?: {
    __typename: 'UpdateToppingPayload'
    topping?: {
      __typename: 'Topping'
      id: string
      name: string
      description: string
    } | null
  } | null
}

export type RecipesQueryVariables = Exact<{ [key: string]: never }>

export type RecipesQuery = {
  __typename: 'Query'
  recipes: Array<{
    __typename: 'Recipe'
    id: string
    name: string
    description: string
    toppings: Array<{
      __typename: 'Topping'
      id: string
      name: string
      description: string
    }>
  }>
}

export type ToppingsQueryVariables = Exact<{ [key: string]: never }>

export type ToppingsQuery = {
  __typename: 'Query'
  toppings: Array<{
    __typename: 'Topping'
    id: string
    name: string
    description: string
  }>
}

export type UsersQueryVariables = Exact<{ [key: string]: never }>

export type UsersQuery = {
  __typename: 'Query'
  users: Array<{
    __typename: 'User'
    id: string
    firstName?: string | null
    lastName?: string | null
    email?: string | null
  }>
}

export const CreateRecipeDocument = gql`
  mutation createRecipe($input: CreateRecipeInput!) {
    createRecipe(input: $input) {
      recipe {
        name
        description
        toppings {
          id
          name
          description
        }
      }
    }
  }
`
export type CreateRecipeMutationFn = Apollo.MutationFunction<
  CreateRecipeMutation,
  CreateRecipeMutationVariables
>

/**
 * __useCreateRecipeMutation__
 *
 * To run a mutation, you first call `useCreateRecipeMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useCreateRecipeMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [createRecipeMutation, { data, loading, error }] = useCreateRecipeMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useCreateRecipeMutation(
  baseOptions?: Apollo.MutationHookOptions<
    CreateRecipeMutation,
    CreateRecipeMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    CreateRecipeMutation,
    CreateRecipeMutationVariables
  >(CreateRecipeDocument, options)
}
export type CreateRecipeMutationHookResult = ReturnType<
  typeof useCreateRecipeMutation
>
export type CreateRecipeMutationResult =
  Apollo.MutationResult<CreateRecipeMutation>
export type CreateRecipeMutationOptions = Apollo.BaseMutationOptions<
  CreateRecipeMutation,
  CreateRecipeMutationVariables
>
export const DeleteToppingDocument = gql`
  mutation deleteTopping($input: DeleteToppingInput!) {
    deleteTopping(input: $input) {
      id
    }
  }
`
export type DeleteToppingMutationFn = Apollo.MutationFunction<
  DeleteToppingMutation,
  DeleteToppingMutationVariables
>

/**
 * __useDeleteToppingMutation__
 *
 * To run a mutation, you first call `useDeleteToppingMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useDeleteToppingMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [deleteToppingMutation, { data, loading, error }] = useDeleteToppingMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useDeleteToppingMutation(
  baseOptions?: Apollo.MutationHookOptions<
    DeleteToppingMutation,
    DeleteToppingMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    DeleteToppingMutation,
    DeleteToppingMutationVariables
  >(DeleteToppingDocument, options)
}
export type DeleteToppingMutationHookResult = ReturnType<
  typeof useDeleteToppingMutation
>
export type DeleteToppingMutationResult =
  Apollo.MutationResult<DeleteToppingMutation>
export type DeleteToppingMutationOptions = Apollo.BaseMutationOptions<
  DeleteToppingMutation,
  DeleteToppingMutationVariables
>
export const UpdateToppingDocument = gql`
  mutation updateTopping($input: UpdateToppingInput!) {
    updateTopping(input: $input) {
      topping {
        id
        name
        description
      }
    }
  }
`
export type UpdateToppingMutationFn = Apollo.MutationFunction<
  UpdateToppingMutation,
  UpdateToppingMutationVariables
>

/**
 * __useUpdateToppingMutation__
 *
 * To run a mutation, you first call `useUpdateToppingMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useUpdateToppingMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [updateToppingMutation, { data, loading, error }] = useUpdateToppingMutation({
 *   variables: {
 *      input: // value for 'input'
 *   },
 * });
 */
export function useUpdateToppingMutation(
  baseOptions?: Apollo.MutationHookOptions<
    UpdateToppingMutation,
    UpdateToppingMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useMutation<
    UpdateToppingMutation,
    UpdateToppingMutationVariables
  >(UpdateToppingDocument, options)
}
export type UpdateToppingMutationHookResult = ReturnType<
  typeof useUpdateToppingMutation
>
export type UpdateToppingMutationResult =
  Apollo.MutationResult<UpdateToppingMutation>
export type UpdateToppingMutationOptions = Apollo.BaseMutationOptions<
  UpdateToppingMutation,
  UpdateToppingMutationVariables
>
export const RecipesDocument = gql`
  query recipes {
    recipes {
      id
      name
      description
      toppings {
        id
        name
        description
      }
    }
  }
`

/**
 * __useRecipesQuery__
 *
 * To run a query within a React component, call `useRecipesQuery` and pass it any options that fit your needs.
 * When your component renders, `useRecipesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useRecipesQuery({
 *   variables: {
 *   },
 * });
 */
export function useRecipesQuery(
  baseOptions?: Apollo.QueryHookOptions<RecipesQuery, RecipesQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<RecipesQuery, RecipesQueryVariables>(
    RecipesDocument,
    options
  )
}
export function useRecipesLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<RecipesQuery, RecipesQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<RecipesQuery, RecipesQueryVariables>(
    RecipesDocument,
    options
  )
}
export type RecipesQueryHookResult = ReturnType<typeof useRecipesQuery>
export type RecipesLazyQueryHookResult = ReturnType<typeof useRecipesLazyQuery>
export type RecipesQueryResult = Apollo.QueryResult<
  RecipesQuery,
  RecipesQueryVariables
>
export const ToppingsDocument = gql`
  query toppings {
    toppings {
      id
      name
      description
    }
  }
`

/**
 * __useToppingsQuery__
 *
 * To run a query within a React component, call `useToppingsQuery` and pass it any options that fit your needs.
 * When your component renders, `useToppingsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useToppingsQuery({
 *   variables: {
 *   },
 * });
 */
export function useToppingsQuery(
  baseOptions?: Apollo.QueryHookOptions<ToppingsQuery, ToppingsQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<ToppingsQuery, ToppingsQueryVariables>(
    ToppingsDocument,
    options
  )
}
export function useToppingsLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<
    ToppingsQuery,
    ToppingsQueryVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<ToppingsQuery, ToppingsQueryVariables>(
    ToppingsDocument,
    options
  )
}
export type ToppingsQueryHookResult = ReturnType<typeof useToppingsQuery>
export type ToppingsLazyQueryHookResult = ReturnType<
  typeof useToppingsLazyQuery
>
export type ToppingsQueryResult = Apollo.QueryResult<
  ToppingsQuery,
  ToppingsQueryVariables
>
export const UsersDocument = gql`
  query users {
    users {
      id
      firstName
      lastName
      email
    }
  }
`

/**
 * __useUsersQuery__
 *
 * To run a query within a React component, call `useUsersQuery` and pass it any options that fit your needs.
 * When your component renders, `useUsersQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useUsersQuery({
 *   variables: {
 *   },
 * });
 */
export function useUsersQuery(
  baseOptions?: Apollo.QueryHookOptions<UsersQuery, UsersQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useQuery<UsersQuery, UsersQueryVariables>(
    UsersDocument,
    options
  )
}
export function useUsersLazyQuery(
  baseOptions?: Apollo.LazyQueryHookOptions<UsersQuery, UsersQueryVariables>
) {
  const options = { ...defaultOptions, ...baseOptions }
  return Apollo.useLazyQuery<UsersQuery, UsersQueryVariables>(
    UsersDocument,
    options
  )
}
export type UsersQueryHookResult = ReturnType<typeof useUsersQuery>
export type UsersLazyQueryHookResult = ReturnType<typeof useUsersLazyQuery>
export type UsersQueryResult = Apollo.QueryResult<
  UsersQuery,
  UsersQueryVariables
>
